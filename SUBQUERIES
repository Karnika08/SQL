Subqueries			
			
1. Scalar Subquery			
			
A subquery that returns only one value.			
			
Example:			
			
SELECT name, salary			
FROM employees			
WHERE salary > (SELECT AVG(salary) FROM employees);			
			
2. Correlated Subquery			
			
A subquery that depends on the outer query.			
			
Runs once per row in the outer query.			
			
Example:			
			
sql			
CopyEdit			
SELECT name, salary			
FROM employees e1			
WHERE salary > (			
    SELECT AVG(salary)			
    FROM employees e2			
    WHERE e1.department_id = e2.department_id			
);			
			
3. IN Subquery			
			
Used to check if a value exists in a list returned by a subquery.			
			
Example:			
			
sql			
CopyEdit			
SELECT name			
FROM employees			
WHERE department_id IN (			
    SELECT id FROM departments WHERE name = 'HR'			
);			
			
Feature	IN	EXISTS	Correlated Subquery
Returns	TRUE if value is in list	TRUE if any match exists	Compares values per row
Performance	Slower if list is huge	Faster on big data sets	Slower but flexible
Use when	List of values	Just checking for existence	Need to compare per row
			
IN SUBQUERY EXAMPLES			
			
Get names of employees who work in departments where salary is more than 4000.			
			
SELECT NAME.DEPARTMENT_ID FROM EMPLOYEES			
WHERE DEPARTMENTID IN (SELECT DEPARTMENTID FROM EMPLOYEES WHERE SALARY>4000)			
			
			
SELECT NAME.DEPARTMENT_ID FROM EMPLOYEES			
WHERE EXISTS (SELECT DEPARTMENTID FROM EMPLOYEES WHERE SALARY>4000)			
			
üîÅ Summary			
			
Type	Subquery Runs First	Per Row?	Returns
Scalar	‚úÖ Once	‚ùå	Single value
IN	‚úÖ Once	‚ùå	List of values
EXISTS	‚ùå For each row	‚úÖ	Doesn't matter
Correlated	‚ùå For each row	‚úÖ	Single value
JOIN	‚úÖ Once	‚ùå	Multiple rows
			
üß† Let‚Äôs go one-by-one:			
			
			
			
1. ‚úÖ Scalar Subquery			
			
Returns only 1 value			
			
Subquery runs once			
			
Used in SELECT, WHERE, or even FROM			
			
Example:			
			
sql			
CopyEdit			
SELECT name, salary			
FROM employees			
WHERE salary = (SELECT MAX(salary) FROM employees);			
			
üîπ Subquery gives: MAX(salary) = 8000			
üîπ Main query becomes: WHERE salary = 8000			
			
			
			
2. ‚úÖ IN Subquery			
			
Subquery runs once			
			
Returns a list			
			
Main query uses that list			
			
Example:			
			
sql			
CopyEdit			
SELECT name FROM employees			
WHERE department_id IN (SELECT id FROM departments WHERE name = 'IT');			
			
üîπ Subquery ‚Üí gives department IDs with name 'IT'			
üîπ Main query checks each employee‚Äôs department_id is in that list			
			
			
			
3. ‚ùå EXISTS (Correlated Subquery)			
			
Subquery runs for each row of outer query			
			
Uses data from outer query			
			
Doesn‚Äôt care about what‚Äôs returned (even SELECT 1 is fine)			
			
Example:			
			
sql			
CopyEdit			
SELECT name FROM employees e			
WHERE EXISTS (			
  SELECT 1 FROM employees sub			
  WHERE sub.department_id = e.department_id AND sub.salary > 4000			
);			
			
üîπ For each employee, check if someone in their department earns > 4000			
üîπ If YES ‚Üí include them			
			
			
			
4. ‚ùå Correlated Subquery (in WHERE or SELECT)			
			
Like EXISTS, but returns a value for each row			
			
Depends on current row‚Äôs data			
			
Example:			
			
sql			
CopyEdit			
SELECT name, salary,			
  (SELECT MAX(salary) FROM employees WHERE department_id = e.department_id) as max_dept_salary			
FROM employees e;			
			
üîπ For each employee, get the max salary in their department			
			
			
			
5. ‚úÖ‚ùå Subquery in JOIN			
			
Used when you want to join with an aggregated or filtered result			
			
Subquery usually runs first (materialized)			
			
Then joined as a regular table			
			
Example:			
			
sql			
CopyEdit			
SELECT e.name, m.max_salary			
FROM employees e			
JOIN (			
  SELECT department_id, MAX(salary) AS max_salary			
  FROM employees			
  GROUP BY department_id			
) m ON e.department_id = m.department_id;			
